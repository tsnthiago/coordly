@page "/product/new"
@page "/product/edit/{Id:int}"
@using BlazorClient.Services
@using BlazorClient.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject ProductService ProductService
@inject NavigationManager NavigationManager

<h3>@(Id == null ? "Create" : "Edit") Product</h3>

<EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="product.Name" class="form-control" />
        <ValidationMessage For="@(() => product.Name)" />
    </div>

    <div class="form-group">
        <label for="price">Price:</label>
        <InputNumber id="price" @bind-Value="product.Price" class="form-control" />
        <ValidationMessage For="@(() => product.Price)" />
    </div>

    <div class="form-group">
        <label for="stockQuantity">Stock Quantity:</label>
        <InputNumber id="stockQuantity" @bind-Value="product.StockQuantity" class="form-control" />
        <ValidationMessage For="@(() => product.StockQuantity)" />
    </div>

    <button type="submit" class="btn btn-primary">@(Id == null ? "Create" : "Update") Product</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    private Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            product = await ProductService.GetProductAsync(Id.Value) ?? new Product();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
        {
            await ProductService.UpdateProductAsync(Id.Value, product);
        }
        else
        {
            await ProductService.CreateProductAsync(product);
        }
        NavigationManager.NavigateTo("/");
    }
}
